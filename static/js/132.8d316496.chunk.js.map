{"version":3,"file":"static/js/132.8d316496.chunk.js","mappings":"ySAAMA,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,qCACaC,IAIrC,SAASY,EAAiBC,GAC/B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,iCACSC,EADT,kBAC0Ba,EAD1B,+CAKxB,SAASC,EAAeC,GAC7B,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,oBACQf,EADR,oBAKxB,SAASgB,EAAeD,GAC7B,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,4BACgBf,EADhB,oBAKxB,SAASiB,EAAkBF,GAChC,OAAOd,EAAuB,GAAD,OACxBF,EADwB,kBACNgB,EADM,4BACgBf,EADhB,sB,kIClC/B,EAAyB,iCAAzB,EAAiE,+BAAjE,EAA6G,qC,SCavGkB,GAAgBC,EAAAA,EAAAA,OAAK,kBAAM,iCAC3BC,GAAcD,EAAAA,EAAAA,OAAK,kBAAM,iCAEhB,SAASE,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAsBC,EAAAA,EAAAA,MAAdzB,EAAR,EAAQA,IAAK0B,EAAb,EAAaA,KACPC,GAAUC,EAAAA,EAAAA,MACVC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAmBZ,GAASa,MAAK,SAACV,GAChCC,EAASD,QAEV,CAACH,IAKJ,OACE,8BACGG,IACC,iCACE,mBAAQW,UAAWC,EAAUC,KAAK,SAASC,QAPpC,WAAO,IAAD,IACnBV,EAAQW,KAAR,iBAAaT,QAAb,IAAaA,GAAb,UAAaA,EAAUU,aAAvB,aAAa,EAAiBC,YAA9B,QAAsC,MAMhC,sBAGA,gBACEC,IAAG,yCAAoClB,EAAMmB,aAC7CC,IAAKpB,EAAMqB,SAEb,wBAAKrB,EAAMqB,SACX,yCACc,0BAAOrB,EAAMsB,mBAE3B,sCACW,0BAAOtB,EAAMuB,eAExB,kCACS,KACP,0BAAOvB,EAAMwB,OAAOC,KAAI,SAACC,GAAD,OAAWA,EAAMC,QAAMC,KAAK,WAEtD,oDAEA,4BACE,SAAC,KAAD,CACEC,GAAE,UAAKpD,EAAL,SACFkC,UAAWC,EACXkB,gBAAiBlB,EAHnB,mBAOA,SAAC,KAAD,CACEiB,GAAE,UAAKpD,EAAL,YACFkC,UAAWC,EACXkB,gBAAiBlB,EAHnB,yBASF,SAAC,EAAAmB,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAO7B,KAAI,UAAKA,EAAL,SAAX,UACE,SAACV,EAAD,CAAeI,QAASA,OAG1B,SAAC,KAAD,CAAOM,KAAI,UAAKA,EAAL,YAAX,UACE,SAACR,EAAD,CAAaE,QAASA","sources":["services/api.js","webpack://goit-react-hw-05-movies/./src/views/MovieDetailsView/MovieDetailsView.module.css?8dcd","views/MovieDetailsView/MovieDetailsView.js"],"sourcesContent":["const BASE_URL = \"https://api.themoviedb.org/3\";\r\nconst API_KEY = \"4bfcb13ad28ed335545ffb88b4a098a0\";\r\n\r\nasync function fetchWithErrorHandling(url = \"\", config = {}) {\r\n  const response = await fetch(url, config);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error(\"Not found\"));\r\n}\r\n\r\nexport function fetchTrendingMovies() {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/trending/all/day?api_key=${API_KEY}`\r\n  );\r\n}\r\n\r\nexport function fetchSearchQuery(searchQuery) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}&language=en-US&page=1&include_adult=false`\r\n  );\r\n}\r\n\r\nexport function fetchMovieById(id) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\r\n  );\r\n}\r\n\r\nexport function fetchMovieCast(id) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\r\n  );\r\n}\r\n\r\nexport function fetchMovieReviews(id) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"MovieDetailsView_button__F5NT6\",\"link\":\"MovieDetailsView_link__S7xaU\",\"activeLink\":\"MovieDetailsView_activeLink__JVQLI\"};","import { useState, useEffect, lazy, Suspense } from \"react\";\r\nimport {\r\n  useParams,\r\n  useLocation,\r\n  useHistory,\r\n  NavLink,\r\n  useRouteMatch,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport * as api from \"../../services/api\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport s from \"./MovieDetailsView.module.css\";\r\n\r\nconst MovieCastView = lazy(() => import(\"../MovieCast/MovieCastView\"));\r\nconst MovieReview = lazy(() => import(\"../MovieReview/MovieReviewsView\"));\r\n\r\nexport default function MovieDetailsView() {\r\n  const { movieId } = useParams();\r\n  const [movie, setMovie] = useState(null);\r\n  const { url, path } = useRouteMatch();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    api.fetchMovieById(movieId).then((movie) => {\r\n      setMovie(movie);\r\n    });\r\n  }, [movieId]);\r\n\r\n  const goBack = () => {\r\n    history.push(location?.state?.form ?? \"/\");\r\n  };\r\n  return (\r\n    <>\r\n      {movie && (\r\n        <>\r\n          <button className={s.button} type=\"button\" onClick={goBack}>\r\n            Go back\r\n          </button>\r\n          <img\r\n            src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\r\n            alt={movie.title}\r\n          />\r\n          <h2>{movie.title}</h2>\r\n          <p>\r\n            User Score: <span>{movie.vote_average}</span>\r\n          </p>\r\n          <p>\r\n            Overview <span>{movie.overview}</span>\r\n          </p>\r\n          <p>\r\n            Genres{\" \"}\r\n            <span>{movie.genres.map((genre) => genre.name).join(\" \")}</span>\r\n          </p>\r\n          <h3>Additional information</h3>\r\n\r\n          <nav>\r\n            <NavLink\r\n              to={`${url}/cast`}\r\n              className={s.link}\r\n              activeClassName={s.activeLink}\r\n            >\r\n              Cast\r\n            </NavLink>\r\n            <NavLink\r\n              to={`${url}/reviews`}\r\n              className={s.link}\r\n              activeClassName={s.activeLink}\r\n            >\r\n              Reviews\r\n            </NavLink>\r\n          </nav>\r\n\r\n          <Suspense fallback={<Loader />}>\r\n            <Switch>\r\n              <Route path={`${path}/cast`}>\r\n                <MovieCastView movieId={movieId} />\r\n              </Route>\r\n\r\n              <Route path={`${path}/reviews`}>\r\n                <MovieReview movieId={movieId} />\r\n              </Route>\r\n            </Switch>\r\n          </Suspense>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"names":["BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchSearchQuery","searchQuery","fetchMovieById","id","fetchMovieCast","fetchMovieReviews","MovieCastView","lazy","MovieReview","MovieDetailsView","movieId","useParams","useState","movie","setMovie","useRouteMatch","path","history","useHistory","location","useLocation","useEffect","api","then","className","s","type","onClick","push","state","form","src","poster_path","alt","title","vote_average","overview","genres","map","genre","name","join","to","activeClassName","Suspense","fallback"],"sourceRoot":""}